// Copyright 2025 The Sigstore Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package dev.sigstore.rekor.v2;

import "google/api/field_behavior.proto";

option go_package = "github.com/sigstore/rekor-tiles/pkg/generated/protobuf";

// A signature over some content
message Signature {
    // The signature over the content
    bytes content = 1 [(google.api.field_behavior) = REQUIRED];
    // The key and scheme used to verify the signature
    Verifier verifier = 2 [(google.api.field_behavior) = REQUIRED];
}

// A Key and Scheme used to verify a signature
message Verifier {
    // The signing scheme used to create a signature
    SignatureScheme scheme = 1 [(google.api.field_behavior) = REQUIRED];
    // The public key used to verify a signature
    PublicKey public_key = 2 [(google.api.field_behavior) = REQUIRED];
}

// A public key. This can be a raw public key or an X509 code signing certificate
// that contains the raw public key information
message PublicKey {
    // raw key or x509 code signing certificate
    bytes content = 1 [(google.api.field_behavior) = REQUIRED];
}

// A hashed content
message Hash {
    // The hash algorithm used
    HashAlgorithm algorithm = 1 [(google.api.field_behavior) = REQUIRED];
    // The resulting hash over the content
    bytes value = 2 [(google.api.field_behavior) = REQUIRED];
}

// Only a subset of the secure hash standard algorithms are supported.
// See <https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf> for more
// details.
// UNSPECIFIED SHOULD not be used, primary reason for inclusion is to force
// any proto JSON serialization to emit the used hash algorithm, as default
// option is to *omit* the default value of an enum (which is the first
// value), represented by '0'.
enum HashAlgorithm {
    HASH_ALGORITHM_UNSPECIFIED = 0;
    SHA2_256 = 1;
    SHA2_384 = 2;
    SHA2_512 = 3;
}

// Only a subset of signature schemes are supported. Schemes must define both
// hashed and unhashed versions of supported signature types.
enum SignatureScheme {
    SCHEME_UNSPECIFIED = 0;
    // TODO: I think we need schemes for crypto agility
}
